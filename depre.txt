import pygame as py 
# ... (suas outras classes Button, Cena, Menu, etc. continuam aqui) ...

# Uma classe simples para representar os objetos que vamos colocar no cenário
class ObjetoColocavel:
    def __init__(self, x, y, imagem):
        self.imagem = imagem
        self.rect = self.imagem.get_rect(topleft=(x, y))

    def desenhar(self, tela):
        tela.blit(self.imagem, self.rect)

# A nova cena que terá a lógica de construção
class FaseEditor(Cena):
    def __init__(self, game):
        super().__init__(game, (20, 40, 60)) # Fundo escuro
        self.GRID_SIZE = 40  # Tamanho de cada célula da grade em pixels
        
        # Estado pode ser 'NORMAL' ou 'POSICIONANDO'
        self.estado = 'NORMAL'
        
        # Guarda o objeto que estamos prestes a colocar (o "fantasma")
        self.objeto_em_mao = None
        
        # Lista para guardar todos os objetos que foram fixados no cenário
        self.objetos_do_cenario = []

        # Carrega as imagens dos objetos que poderemos colocar (exemplo)
        # Para este exemplo, vamos criar superfícies simples em vez de carregar arquivos
        self.imagem_cadeira = py.Surface((self.GRID_SIZE, self.GRID_SIZE))
        self.imagem_cadeira.fill((139, 69, 19)) # Cor de madeira
        
        self.imagem_planta = py.Surface((self.GRID_SIZE, self.GRID_SIZE))
        self.imagem_planta.fill((0, 100, 0)) # Cor verde escuro
        py.draw.circle(self.imagem_planta, (0, 200, 0), (self.GRID_SIZE // 2, self.GRID_SIZE // 2), self.GRID_SIZE // 3)

    # Função para desenhar a grade na tela
    def desenhar_grid(self, tela):
        largura, altura = tela.get_size()
        for x in range(0, largura, self.GRID_SIZE):
            py.draw.line(tela, (50, 70, 90), (x, 0), (x, altura))
        for y in range(0, altura, self.GRID_SIZE):
            py.draw.line(tela, (50, 70, 90), (0, y), (largura, y))

    def update(self, eventos):
        mouse_x, mouse_y = py.mouse.get_pos()

        for e in eventos:
            # Lógica para ENTRAR no modo de posicionamento
            if e.type == py.KEYDOWN:
                if self.estado == 'NORMAL':
                    if e.key == py.K_1: # Apertou '1' para pegar uma cadeira
                        self.estado = 'POSICIONANDO'
                        # Cria o objeto "fantasma" que seguirá o mouse
                        self.objeto_em_mao = ObjetoColocavel(0, 0, self.imagem_cadeira)
                        self.objeto_em_mao.imagem.set_alpha(150) # Deixa semitransparente
                    
                    if e.key == py.K_2: # Apertou '2' para pegar uma planta
                        self.estado = 'POSICIONANDO'
                        self.objeto_em_mao = ObjetoColocavel(0, 0, self.imagem_planta)
                        self.objeto_em_mao.imagem.set_alpha(150)

            # Se já estamos no modo de posicionamento
            if self.estado == 'POSICIONANDO':
                # Movimento do objeto fantasma (snap-to-grid)
                # Usamos divisão inteira para "travar" na grade
                snap_x = (mouse_x // self.GRID_SIZE) * self.GRID_SIZE
                snap_y = (mouse_y // self.GRID_SIZE) * self.GRID_SIZE
                self.objeto_em_mao.rect.topleft = (snap_x, snap_y)

                if e.type == py.KEYDOWN:
                    # Lógica para FIXAR o objeto (com a tecla ESPAÇO)
                    if e.key == py.K_SPACE:
                        # Cria um NOVO objeto, sólido, na posição final
                        novo_objeto_fixo = ObjetoColocavel(snap_x, snap_y, self.objeto_em_mao.imagem)
                        novo_objeto_fixo.imagem.set_alpha(255) # Garante que é opaco
                        self.objetos_do_cenario.append(novo_objeto_fixo)
                        
                        # Volta ao estado normal
                        self.estado = 'NORMAL'
                        self.objeto_em_mao = None
                    
                    # Lógica para CANCELAR o posicionamento (com a tecla ESC)
                    if e.key == py.K_ESCAPE:
                        self.estado = 'NORMAL'
                        self.objeto_em_mao = None

    def drawn(self, tela):
        super().drawn(tela) # Desenha o fundo e os botões (se houver)

        # Desenha todos os objetos que já foram fixados
        for obj in self.objetos_do_cenario:
            obj.desenhar(tela)

        # Se estivermos posicionando algo, desenha a grade e o objeto "fantasma"
        if self.estado == 'POSICIONANDO':
            self.desenhar_grid(tela)
            if self.objeto_em_mao:
                self.objeto_em_mao.desenhar(tela)

        # Desenha um texto de ajuda
        info = "Pressione '1' para Cadeira, '2' para Planta | ESPAÇO para colocar | ESC para cancelar"
        txt = fonte.render(info, True, (255, 255, 255))
        tela.blit(txt, (10, 10))